set sql_safe_updates=0;
select * from petowners; 
select * from pets; 
select * from proceduresdetails;
select * from procedureshistory;
/* Q1 List the names of all pet owners along with the names of their pets */
select petowners.OwnerID, concat(petowners.Name,' ', petowners.Surname) as Owner_name, pets.Name as Pet_Name
from petowners
inner join pets on petowners.OwnerID = pets.OwnerID
order by OwnerID;

/* Q2 List all pets and their owner names, including pets that don't have recorded owners */
select pets.PetID, pets.name as Pet_Name, concat(petowners.Name, ' ', petowners.Surname)as Owner_name
from pets
left join petowners On pets.OwnerID=petowners.OwnerID
order by owner_name;
## There is no pet without a recorded owner but rather some owners with multiple pets

/* Q3 Combine the information of pets and their owners, including those pets without owners and owners without pets.*/
select pets.PetID, pets.Name AS Pet_Name, pets.Kind, 
concat(petowners.Name, ' ', petowners.Surname) AS Owner_name
from pets
right join petowners ON petowners.OwnerID = pets.OwnerID
order by PetId;

/*Q4 Find the names of pets along with their owners' names and the details of the procedures they have undergone. */
select pets.Name AS Pet_Name, concat(petowners.Name, ' ', petowners.Surname) AS Owner_name,
procedureshistory.proceduretype as Procedure_Type 
from procedureshistory
left join pets ON procedureshistory.PetID= pets.PetID
left join petowners ON petowners.OwnerID = pets.OwnerID
order by Pet_name desc;

/* Q5 List all pet owners and the number of dogs they own*/
select petowners.ownerID, 
concat(petowners.Name, ' ', petowners.Surname) AS Owner_name , 
Count(pets.kind) AS Count_of_dogs
from pets
left join petowners on pets.ownerId=petowners.ownerID
group by petowners.ownerID, Owner_name
order by ownerID;

/* Q6 Identify pets that have not had any procedures.*/
select procedureshistory.petID, pets.name, 
procedureshistory.ProcedureType AS ProcedureType
from procedureshistory
left join pets on procedureshistory.petID= pets.petID
where proceduretype= Null
order by name desc;
## No Pet without the record of any procedures

/*Q7 Find the name of the oldest pet */
select name, MAX(age) As Age
from pets
group by name
order by age desc
Limit 1;
## Simba is the oldest pet 15 years old

/* Q8 List all pets who had procedures that cost more than the average cost of all procedures.*/
select pets.Name AS Pet_Name, pets.PetID as PetID,
procedureshistory.proceduretype as Procedure_Type , proceduresdetails.Price as Price
from procedureshistory
left join proceduresdetails ON  procedureshistory.ProcedureSubCode = proceduresdetails.ProcedureSubCode
left join pets ON procedureshistory.PetID = pets.PetID
group by Pet_name, PetID
having Price > Avg(Price);

/*Q9 Find the details of procedures performed on 'Cuddles'*/
select pets.Name as Pet_Name, procedureshistory.ProcedureType as procedure_type
from pets
join procedureshistory on pets.PetId = procedureshistory.PetId
where pets.Name = 'Cuddles'
order by pet_Name;

/* 10. Create a list of pet owners along with the total cost they have spent on procedures and display only 
those who have spent above the average spending.*/
select concat(petowners.Name, ' ', petowners.Surname) AS Owner_name, 
sum(proceduresdetails.Price) as Total_price
from petowners
left join pets ON petowners.OwnerID= pets.OwnerID
left join procedureshistory ON pets.PetId = procedureshistory.PetId
left join proceduresdetails ON 
procedureshistory.procedureType = proceduresdetails.procedureType and
procedureshistory.ProcedureSubCode = proceduresdetails.ProcedureSubCode
group by owner_name
HAVING Total_price > (select Avg(proceduresdetails.Price));

/*Q11 List the pets who have undergone a procedure called 'VACCINATIONS*/
select pets.Name as Pet_Name, procedureshistory.PetID, procedureshistory.ProcedureType as Procedure_Type
from procedureshistory
left join pets ON procedureshistory.PetId = pets.PetId
where procedureshistory.ProcedureType = 'Vaccinations'
order by Pet_Name desc;

select PetID as PetId , proceduretype
from procedureshistory
where proceduretype = 'Vaccinations'
order by PetID;

/*Q12 Find the owners of pets who have had a procedure called 'EMERGENCY' */
select pets.Name AS Pet_Name, concat(petowners.Name, ' ', petowners.Surname) AS Owner_name,
procedureshistory.proceduretype as Procedure_Type 
from petowners
left join pets ON pets.OwnerID= petowners.OwnerID
left join procedureshistory ON pets.PetID = procedureshistory.PetID
where ProcedureType = 'Emergency';
## There is no procedure named 'Emergency'

/*Q13 Calculate the total cost spent by each pet owner on procedures. */
select concat(petowners.Name, ' ', petowners.Surname) AS Owner_name, 
sum(proceduresdetails.Price) as Total_price
from petowners
left join pets ON petowners.OwnerID= pets.OwnerID
left join procedureshistory ON pets.PetId = procedureshistory.PetId
left join proceduresdetails ON 
procedureshistory.procedureType = proceduresdetails.procedureType and
procedureshistory.ProcedureSubCode = proceduresdetails.ProcedureSubCode
group by owner_name
having Total_price > 0
order by Total_price desc;

/* Q14 Count the number of pets of each kind */
select kind, count(kind) as Num_of_pets
from pets
group by kind;

/*Q15 Group pets by their kind and gender and count the number of pets in each group.*/
select kind, gender, count(*)as Num_of_pets
from pets
group by kind, gender;

/* Q16 Show the average age of pets for each kind, but only for kinds that have more than 5 pets.*/
select kind, Round(Avg(Age),2) as Average_age
from pets
group by kind
having count(kind)>5;

/* Q17 Find the types of procedures that have an average cost greater than $50. */
select proceduretype, Round(avg(price),2) as Avg_Cost
from proceduresdetails
group by ProcedureType
having Avg_cost > 50;

/* Q18 Classify pets as 'Young', 'Adult', or 'Senior' based on their age. Age less then 3 Young, Age between 3and 8 Adult, else Senior.*/
select name, kind, Age,
case 
when Age < 3 then 'Young'
when Age >=3 and age < 8 then 'Adult'
when age >= 8 then 'Senior'
end as Age_Class
from pets
group by name, kind
order by age;

/* Q19 Calculate the total spending of each pet owner on procedures, labeling them as 'Low Spender' for spending 
under $100, 'Moderate Spender' for spending between $100 and $500, and 'High Spender' for spending over $500.*/
select concat(petowners.Name, ' ', petowners.Surname) AS Owner_name, 
sum(proceduresdetails.Price) as Total_price,
case 
when sum(proceduresdetails.Price) < 100 then 'Low Spender'
when sum(proceduresdetails.Price) >= 100 and sum(proceduresdetails.Price) < 500 then 'Moderate Spender'
when sum(proceduresdetails.Price) >= 500 then 'High Spender'
end  Spender_type
from petowners
left join pets ON petowners.OwnerID= pets.OwnerID
left join procedureshistory ON pets.PetId = procedureshistory.PetId
left join proceduresdetails ON procedureshistory.ProcedureType = proceduresdetails.ProcedureType
where proceduresdetails.Price is not null
group by owner_name
order by Total_price;

/* Q20 Show the gender of pets with a custom label ('Boy' for male, 'Girl' for female). */
select name as Pet_name,
case 
when gender = 'male' then 'Boy'
when gender = 'female' then 'Girl'
end as Gender_label
from pets
group by Pet_name;

/*Q21 For each pet, display the pet's name, the number of procedures they've had, and a status label: 
'Regular' for pets with 1 to 3 procedures, 'Frequent' for 4 to 7 procedures, and 'Super User' for more than 7 procedures.*/
select pets.Name AS Pet_Name, Count(procedureshistory.proceduretype) as Number_of_procedures,
case 
when Count(procedureshistory.proceduretype) >=1 and Count(procedureshistory.proceduretype) <=3 then 'Regular'
when Count(procedureshistory.proceduretype) >=4 and Count(procedureshistory.proceduretype) <=7 then 'Frequent'
when Count(procedureshistory.proceduretype) > 7 then 'Super User'
end as User_type
from pets
left join procedureshistory ON procedureshistory.PetID= pets.PetID
left join petowners ON petowners.OwnerID = pets.OwnerID
group by Pet_name
having Count(procedureshistory.proceduretype) !=0
order by Number_of_procedures;

/* Q22 Rank pets by age within each kind. */
select Kind,Name, Age,
rank() over (partition by Kind order by Age) as AgeRank
from pets;

/*Q23 Assign a dense rank to pets based on their age, regardless of kind */
select Kind,Name, Age,
dense_rank() over (order by Age) as AgeRank
from pets;

/*Q25 Show the average age of pets, partitioned by their kind */
select Kind, Round(Avg(Age),2) as Avg_AgeRank
from pets
group by kind;

/*Q26 Create a CTE that lists all pets, then select pets older than 5 years from the CTE.*/
with AllPets as ( SELECT PetID, Name, Age from pets)
select PetID, Name, age
from AllPets
where age > 5
order by name;

